import numpy as np
from src.models import ClothingShapePoseModelMLP_v2, ClothingPoseModelMLP
from src.utils import read_json
import yaml
from utils.utils import Utils
import torch 

smplx_300 = Utils.SMPLX(num_betas = 300)

# model initialization and training
with open('./settings/setting1.yml') as f:
    setting = yaml.load(f, Loader=yaml.FullLoader)
    epochs0 = setting['epochs0'] # phase 0 : train auto-encoder
    epochs1 = setting['epochs1'] # phase 1 : train A shape only
    epochs2 = setting['epochs2'] # phase 2 : train all shape: pose-dependent-deformation
    dims = setting['dims']
    enc_dims = setting['enc_dims']
    train = setting['train']
    cloth_name = setting['cloth_name']
    base_body_dir = setting['base_body_dir']
    valid_list_path = setting['valid_list_path']
    model_name = setting['model_name']

valid_list = read_json(valid_list_path)['path']
model = ClothingShapePoseModelMLP_v2(cloth_name = cloth_name, base_body_dir = base_body_dir, save_path = './model/%s.pt'%model_name, epochs0 = epochs0, epochs1 = epochs1, epochs2 = epochs2,
                                    dims = dims, enc_dims = enc_dims,
                                    train = train, lr = 1e-4, valid_list = valid_list, HPM = Utils.SMPLX, augment = False)
model_pose = ClothingPoseModelMLP(cloth_name = cloth_name, base_body_dir = base_body_dir, valid_list = valid_list, HPM = Utils.SMPLX)

# get displacement from params
# params = Utils.IO.read_json('./testdata/data1.json')
# shape = np.asarray(params['shape']).reshape(1,-1) #* 0
# disp = np.asarray(params['disps']) #* 0
# pose = np.asarray(params['pose']).reshape(1,-1)

# shape 
shape = np.zeros([1, 10]) + 1
# trans
trans = np.zeros([1, 3])
# disps
disp = None

# pose
# define A pose (pose of SMPL-X model)
PI = np.math.pi
A_pose = np.zeros([1, 72])
A_pose[:, 1*3+1] = PI / 12 # 왼쪽 hip
A_pose[:, 2*3+1] = - PI / 12 # 오른쪽 hip
A_pose[:, 13*3+2] = - PI / 8 # 왼쪽 collar
A_pose[:, 14*3+2] = PI / 8 # 오른쪽 collar
A_pose[:, 16*3+2] = - PI / 6 # 왼쪽 shoulder
A_pose[:, 17*3+2] = PI / 6 # 오른쪽 shoulder
A_pose[:, 18*3+1] = - PI / 8# 왼쪽 elbow
A_pose[:, 19*3+1] = PI / 8# 오른쪽 elbow
A_pose = A_pose.reshape([-1, 24, 3])
A_pose = A_pose[:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]]
A_pose = A_pose.reshape([-1, 21 * 3])

# poses
pose1 = np.asarray([[0.06450176984071732, 0.09849504762214703, -0.08570602536201477, 0.059664126485586166, -0.21485568218750042, -0.04852881655097008, 0.11753357201814651, 0.013580764643847942, -0.03505030274391174, 0.029596485197544098, 0.02614753134548664, 0.019204996526241302, 0.3379209637641907, -0.06910792738199234, 0.1408093124628067, 0.005485516972839832, -0.008846553973853588, -0.021847613155841827, -0.07021287083625793, 0.18724100291728973, 0.029868392273783684, 0.12307129055261612, 0.043221525847911835, 0.12146688252687454, 0.08663041889667511, 0.003565540537238121, 0.005785636603832245, -0.00012071967648807913, -0.05718742683529854, 0.05468115955591202, -0.13475856184959412, 0.0010772800305858254, -0.08461100608110428, 0.013245812617242336, 7.208799615909811e-06, 0.07141326367855072, -0.1892881542444229, 0.033583562821149826, -0.2957508360344512, -0.11945497244596481, 0.01349160447716713, 0.39552495827261036, -0.09110718220472336, -0.007611952722072601, 0.027327487245202065, 0.6663442254066467, -0.4035227298736572, -0.8999331520661171, 0.4303370714187622, 0.1252927929162979, 0.8466149495705422, 0.19861379265785217, -0.5892758165794951, -0.19945740699768066, 0.5585812926292419, 0.5248209630447966, 0.08230254054069519, -0.11914173513650894, 0.29417476058006287, 0.21227604150772095, 0.3532152771949768, -0.04478670656681061, -0.10762694478034973]]) + A_pose
pose1 /= 2
pose2 = np.asarray([[0.11728298664093018, 0.11288498536569161, 0.06552334129810333, -0.09454665333032608, -0.16542687647861523, -0.11816294491291046, -0.0007971020531840622, -0.01457862090319395, 0.05815659835934639, -0.13145136833190918, 0.083580382168293, -0.09540432691574097, 0.16970239579677582, 0.05061300843954086, 0.10751784592866898, -0.03086988441646099, -0.01573837175965309, -0.040139421820640564, 0.04255577176809311, 0.03667347505688667, 0.0019089856650680304, -0.06522046774625778, -0.018913408741354942, 0.0917922630906105, 0.12219501286745071, 0.0398850217461586, -0.07634362578392029, -0.19970089197158813, 0.2028655707836151, 0.10277105867862701, 0.20090268552303314, 0.08681780099868774, 0.053121957927942276, 0.010539354756474495, -0.003944349940866232, -0.08949323743581772, 0.0009384667500853539, 0.09137174487113953, -0.1372390781838042, 0.08307763189077377, -0.04111466184258461, 0.31276882638517445, -0.006340386345982552, 0.30404582619667053, 0.0889788568019867, 0.1820688098669052, -0.08425676822662354, -0.8745578454598244, 0.11841297894716263, 0.11503246426582336, 0.7767653988465126, 0.22719158232212067, -0.8982715999085051, -0.02372421883046627, 0.2836173474788666, 0.8988712226349456, -0.02358640544116497, -0.4354381263256073, -0.050452254712581635, -0.34818464517593384, -0.39935174584388733, -0.1155087798833847, 0.37495049834251404]])
pose3 = np.asarray([[0.029209336265921593, 0.1468731370649962, 0.013487087562680244, 0.013172341510653496, -0.15881913163584752, -0.001806369866244495, 0.07941281050443649, -0.03996090218424797, 0.026535144075751305, -0.03908589854836464, -0.03304902836680412, -0.018151992931962013, -0.025068121030926704, 0.06170850992202759, 0.017830677330493927, -0.19758349657058716, -0.07787339389324188, 0.009399471804499626, 0.021114781498908997, 0.11594630032777786, -0.010010174475610256, -0.01745726354420185, -0.07156515121459961, 0.07044568657875061, 0.045663345605134964, 0.00553735950961709, 0.013702411204576492, -0.15088649094104767, 0.037211764603853226, -0.001591276377439499, -0.023460710421204567, 0.06968798488378525, -0.08725573867559433, 0.19780129194259644, -0.1759878695011139, 0.00043900622404180467, -0.09879973530769348, -0.08973466604948044, -0.23550178309265202, -0.14534397423267365, 0.1928459107875824, 0.3236368839937789, 0.22332477569580078, -0.25159695744514465, 0.07159785181283951, 0.2597316801548004, -0.5363432168960571, -0.8922182844742592, 0.25016728043556213, 0.1892465054988861, 0.8792718576058205, 0.18833819031715393, -0.9851531778771025, -0.026791725307703018, 0.29409554600715637, 0.25343177293721264, 0.07123075425624847, -0.33906060457229614, -0.13743309676647186, 0.0030617015436291695, 0.18282411992549896, -0.10780296474695206, -0.015658099204301834]])
pose4 = np.asarray([[0.10044487565755844, 0.15247108795565648, 0.011782287620007992, 0.08215220272541046, -0.1740106233291058, -0.04309026524424553, 0.07798117399215698, -0.01884366199374199, -0.008646964095532894, -0.036232542246580124, 0.03267316520214081, 0.036612823605537415, -0.005937756970524788, 0.019563278183341026, -0.019953174516558647, -0.15026521682739258, -0.04645776003599167, -0.01061961054801941, 0.07241900265216827, 0.01848074048757553, -0.1370663195848465, -0.016393205150961876, -0.08452005684375763, 0.16728301346302032, 0.10545817017555237, -0.0082176448777318, -0.021683502942323685, -0.18768775463104248, 0.09051423519849777, 0.18547692894935608, 0.05423489585518837, 0.1007823497056961, -0.26761284470558167, 0.17707568407058716, 0.0271114744246006, 0.11449519544839859, -0.31101953983306885, 0.10260546207427979, -0.017477626104984934, -0.1492173820734024, 0.026230711489915848, 0.2556514163810355, -0.15215392410755157, 0.004503232426941395, -0.09200622886419296, 0.15964412689208984, -0.3541145622730255, -0.7646614240273293, 0.06682588905096054, 0.35961395502090454, 0.5930401908024605, 0.19434595108032227, -1.2931957637268645, 0.41072216629981995, 0.13659103214740753, 1.2699774896103484, -0.4376612901687622, 0.10334703326225281, 0.08942051231861115, 0.4826609492301941, 0.2511274814605713, 0.031227553263306618, -0.42137807607650757]])
pose5 = np.asarray([[-0.04317580536007881, -0.03343698746639209, 0.03516613692045212, -0.13038040697574615, -0.11721302204650921, 0.02088487520813942, 0.06788960099220276, -0.09279302507638931, 0.025762394070625305, 0.06194646283984184, -0.0719713568687439, -0.07133878767490387, 0.30719414353370667, -0.00852530263364315, 0.02650219388306141, -0.08700213581323624, -0.04214014858007431, -0.0070098889991641045, 0.31136584281921387, 0.15289759635925293, -0.15871360898017883, 0.19381952285766602, -0.18634074926376343, 0.18646268546581268, 0.0992264673113823, -0.014251562766730785, -0.0017969460459426045, -0.18726062774658203, -0.03022892214357853, 0.09641962498426437, -0.0033020232804119587, 0.005313393659889698, -0.2691323161125183, -0.20005090534687042, 0.03704436868429184, -0.03099977970123291, -0.06702396273612976, -0.09686808288097382, -0.09695828904691761, 0.1496347188949585, -0.05556241795420647, 0.07805789460722035, 0.19538500905036926, -0.01150865014642477, 0.04148920997977257, -0.03412795811891556, -0.2579635679721832, -0.90873073803032, 0.34084999561309814, -0.20110343396663666, 0.7848883794411476, 0.19302402436733246, -1.172006109853421, 0.2615496814250946, 0.2942088544368744, 1.060445467134152, -0.04488703981041908, 0.08879845589399338, -0.029366428032517433, 0.29315370321273804, -0.0445987842977047, -0.03721866011619568, -0.36197543144226074]])
pose5 = (pose5 + A_pose) / 2
pose6 = np.asarray([[-0.07704034447669983, 0.14347673495185656, -0.020659761503338814, 0.023468665778636932, -0.12126031246853156, 0.036048710346221924, 0.007212806958705187, 0.015651635825634003, 0.05983263626694679, -0.007199673447757959, 0.0733187273144722, 0.011212735436856747, 0.020457565784454346, 0.0014749318361282349, -0.017890827730298042, -0.06022091582417488, -0.02155163511633873, -0.06005847454071045, 0.03262960538268089, 0.19435101747512817, -0.11042318493127823, -0.020713558420538902, -0.10680888593196869, 0.05315755680203438, 0.08107595145702362, 0.036989063024520874, -0.04757577180862427, -0.012827065773308277, -0.07057003676891327, 0.2211645096540451, -0.12496151775121689, -0.08606073260307312, -0.17859208583831787, 0.021931102499365807, 0.013933786191046238, 0.030490342527627945, -0.0019304415909573436, 0.019359327852725983, -0.3058683892089469, -0.032842885702848434, 0.12396179139614105, 0.33705646743360584, -0.1350860744714737, -0.0011763146612793207, -0.021878540515899658, 0.1823451668024063, -0.02321348898112774, -0.8103193567856606, 0.24717888236045837, 0.05448196455836296, 0.7564475463494118, 0.3182457387447357, -0.6835305189091307, 0.21727311611175537, 0.4960635304450989, 0.6884965096909148, -0.07943826913833618, 0.16786372661590576, -0.03002958558499813, 0.1980416178703308, 0.30832362174987793, 0.033703066408634186, -0.13674519956111908]])
poses = [pose1, pose2, pose3, pose4, pose5, pose6]

# expression
expression1 = torch.randn([1, 10], dtype=torch.float32).to('cuda') * 0
expression2 = torch.randn([1, 10], dtype=torch.float32).to('cuda')
expression3 = torch.randn([1, 10], dtype=torch.float32).to('cuda')
expression4 = torch.randn([1, 10], dtype=torch.float32).to('cuda')
expression5 = torch.randn([1, 10], dtype=torch.float32).to('cuda')
expression6 = torch.randn([1, 10], dtype=torch.float32).to('cuda')
expressions = [expression1, expression2, expression3, expression4, expression5, expression6]


# change according to pose and expression
N_interpolate = 50
for i in range(N_interpolate * (len(poses) - 1)):
    pose_start = poses[i // N_interpolate]
    pose_end = poses[i // N_interpolate + 1]
    pose = (pose_start * (N_interpolate - i % N_interpolate) + pose_end * (i % N_interpolate)) / N_interpolate
    
    expression_start = expressions[i // N_interpolate]
    expression_end = expressions[i // N_interpolate + 1]
    expression = (expression_start * (N_interpolate - i % N_interpolate) + expression_end * (i % N_interpolate)) / N_interpolate

    body = Utils.SMPLX.smplx_forward(smplx_300, A_pose, shape[:, :], trans, disps = disp, expression = expression)
    body[:, :, 1] -= body[:, :, 1].min()
    cloth = model.drape(body, torch.FloatTensor(pose), disp, name = 'pose_%d_%d'%(i, N_interpolate*(len(poses) - 1)))
    body *= 10
    model_pose.drape(torch.FloatTensor(body).cuda(), torch.FloatTensor([cloth]).cuda(), torch.FloatTensor(pose).cuda(), torch.FloatTensor(trans).cuda(), name = 'pose_%d_%d'%(i, N_interpolate*(len(poses) - 1)))